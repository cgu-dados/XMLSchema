<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/Users/duncan/Classes/StatComputing/XDynDocs/inst/XSL/OmegahatXSL/Todo.xsl" ?> 
<topics xmlns:r="http://www.r-project.org"
	 xmlns:xml="http://www.w3.org/XML/1998/namespace">
<topic>
<title>General</title>
<items>
<!-- Invoke with 
       "open -a /Applications/Google\ Chrome.app Todo.xml - -args - -allow-file-access-from-files" 
  You have to join the "- -" into -\-. They are here in a comment  -->

<item status="done">
UnionDefinition doesn't seem to get the dependent classes defined.
<br/>
For SchemaVoidType, define a class that extends
<r:code>
library(XMLSchema); sh = readSchema("inst/samples/shirts.xsd")
defineClasses(sh, verbose = TRUE)
nn = newXMLNode("shirt")
as(nn, "shirt")
</r:code>
</item>

<item status="check">
Infinite recursion when resolving a type with same name as an element.
Can find the element first.  e.g. items in shirts.xsd
<r:code>
library(XMLSchema); sh = readSchema("inst/samples/shirts.xsd")
XMLSchema:::defClass(sh[[1]]$items, types = sh)
</r:code>
<br/>
Added a type argument which can be a function and is used as
a predicate to find which elements in a schema we want to consider.
</item>


<item status="high">
readSchema fails for ogckml22.xsd
</item>
<item status="done">
source("check.R") broken again.
ogckml22.xsd causing problems.
</item>
<item status="done">
MODIS example for SSOAP not putting product name in the body of the request
for def@functions$getbands("MCD12Q1").
See modis.R
<br/>
We leave it to standardGeneric() to add the content to the node if literal is FALSE.
But our generic had ans = standardGeneric() and surrounding code.
But the change in R meant that this was defaulting to a simple generic with no surrounding
code. So the values were never being inserted into the xml.
</item>
<item status="done">
SSOAP fails for kegg.R
<r:code>
debug(SSOAP:::writeTypes)
o = kegg.iface@functions$get_pathways_by_genes("eco:b0078")
</r:code>
The types is 
<programlisting><![CDATA[
          xsi:type SOAP-ENC:arrayType 
  "SOAP-ENC:Array"            "NA[1]" 
]]></programlisting>
This should be string[1], not NA[1], of course.
</item>

<item status="low">
Generalize how we compute the as.string/as.character name in SOAPTypes.S#56 and genCode.R#733
</item>

<item>
Look into why we needed the call to <r:func>findSelfRefs</r:func> in resolve.
What does it do?  
<br/>
Do we just need to make that smarter so that it doesn't kill the wrong thing,
e.g. egQueryResultType's ResultItem LocalElement slot.
</item>
<item>
It would be good to use an enviroment for SchemaCollection and SchemaTypes
so that we can change and add items as we process things.
We could insert the resolved definitions and avoid doing it over again.
We can add new items when we define intermediate classes such as local
data types within elements.
</item>

<item>
<b>Check</b>
Add method for <r:expr>as(node, "list")</r:expr> and implement it as
<r:expr>xmlSApply(node, fromXML)</r:expr>.
Implement this for <r:func>fromXML</r:func> also.
</item>



<item>
<b>Is this working now?</b>
createSOAPConverter() failing for SimpleSequenceType in pmml
because no name for slot (and NA for type).  Class "row" again!
</item>

<item status="high">
defineClasses(pmml) fails because ListOfANY is not found.
Part of "TableLocatorOrInlineTable", then Extension.row, then "row".
The last of these has a repn with ListOfANY. 
Need to have the class check the validity of the length, i.e. minOccurs=2.
<br/>
Do we really need ListOfANY. Can't we just extend list.
<br/>
Add validity for length.
</item>

<item>
<b>Check how the attribute is mapped to R</b>
<br/>
defineClass(pmmlSchema) fails.
Now infinite recursion.
<br/>
Ending up with a call o getClassDef() with "" as the name of the class.
This happens as part of processing the ChildParent type.
As we descend down, we get to InlineTable and try to define this.
This has slots Extension and row. At this point, Rname and name on the
<r:expr>i@slotTypes$row@Rname</r:expr> are correct, i.e. "row".
But the names of the slots in <r:expr>names(i@slotTypes$row@slotTypes)</r:expr> is just "".
And that is true of the original object in our schema returned by <r:func>readSchema</r:func>, i.e
<r:expr>names(sch[[1]]$row@type@slotTypes)</r:expr>.  So that is where our problem may lie.
Similarly, <r:expr>sch[[1]]$row@type@slotTypes[[1]]@Rname</r:expr> gives character(0)
and 
<r:expr>sch[[1]]$row@type@slotTypes[[1]]@name</r:expr> gives NA.
<b>Fix up the hacks in processSchemaElement with note "XXX Forcing"</b>
<br/>
With this force-fixes, we now get infinite recursion when defining MiningModel.
<br/>
One of the problems with this name the type the same as the element is that
when we attempt to resolve the type by the name, we (may) get the element
<br/>

When we get down into <r:class>defnClass</r:class> for "row"
<br/>
In the call to defineClassDefinition for this, we get
<r:code>
sapply(i@slotTypes, class)
<r:output><![CDATA[
                   Extension    TableLocatorOrInlineTable 
                   "Element"            "UnionDefinition" 
                  childField                  parentField 
          "SchemaStringType"           "SchemaStringType" 
            parentLevelField                  isRecursive 
          "SchemaStringType" "RestrictedStringDefinition" 
]]></r:output>
</r:code>
We are dying in the 6th of these which is the isRecursive.
The problem is that there is no type attribute.
The type is given as a child of the <xml:tag>attribute</xml:tag>.
</item>

<item status="high">
In processing egquery.xsd, eGQueryResultType doesn't recognize
the maxOccurs for the slot named ResultItem (with @type ResultItemType) and so just has one rather than a list
of them.
<br/>
In the call to defClass, we end up with
<r:code>
i@name
class(i@slotTypes[[2]])   # ClassDefinition
class(sch[[1]]$eGQueryResultType@slotTypes[[2]]) # LocalElement
i@slotTypes[[2]]@count   # numeric(0)
</r:code>
So we have gone from a LocalElement with a count > 1 to just an instance.
<br/>
Resolving the local element directly
<r:code>
r = XMLSchema:::resolve(sch[[1]]$eGQueryResultType@slotTypes[[2]], sch)
</r:code>
results in a LocalElement. The count on its @type is numeric(0).
But
<r:code>
tt = XMLSchema:::resolve(sch[[1]]$eGQueryResultType, sch)
class(tt@slotTypes[[2]])
</r:code>
loses the LocalElement and just returns the ClassDefinition for ResultItemType.
So let's look at where in the recursive <r:func>resolve</r:func> this happens.
<br/>
<b>The problem is that we were stripping the LocalElement in the call to 
<r:func>findSelfRefs</r:func> and so <r:func>resolve</r:func> was never seeing that 
<r:class>LocalElement</r:class>.
This happens when calling <r:func>findSelfRefs</r:func> on the eGQueryResultType
object (not the LocalElement object).</b>
<br/>
This class is being defined by forcing the dependencies when defining Result.
And in the Result description in defineClassDefinition,  we have
<r:expr>class(i@slotTypes[[2]]@type@slotTypes[[2]])</r:expr> returning a ClassDefinition
and not a LocalElement.  So somehow - perhaps during resolve() - we have lost that information.
How should we handle it - return the LocalElement, or make the ClassDefinition into a RestrictedListType or
  include the count and have that be used when defining the actual class.
<br/>
After we readSchema(), we have the correct information. So it is when we define the class.
The call to createClassRepresentation() returns "ResultItemType" for the second slot
rather than a list of these.  We should define a new RestrictedListType or something
that induces a new class which is a List-Of-ResultItemType objects.
This calls mapSchemaTypeToS().
If this creates a new class description, we have to ensure that is defined.
So we should do this earlier in the process, i.e. recognize the count
and turn the slotType into RestrictedListType in the ClassDefinition.
So this would be done in <r:func>processSchemaType</r:func>.
The problem is that we have a local element there.
So it is legitimate to leave that as is, unaggressively  describing the element.
<r:code>
source("query.R")
e = query[[1]]$eGQueryResult@slotTypes[[2]]
class(e)
e@count
</r:code>
The count is also on the type, but that is a SchemaTypeReference.
This is getting lost when we resolve the reference.
<br/>
This is probably okay and then we recognize that we have a type
and a number of elements. So we could create an intermediate class,
or use a generic list with a filter on the types. This still
needs an intermediate class that extends the generic list type.
<br/>
We could make eGQueryResultType an extension of  list with an ERROR slot.
Alternatively, make it a new class with 2 slots - ResultItem and ERROR, 
and ResultItem would be a qualified list class.
<br/>
Is this similar to Authors in biblio.xsd, i.e.
making a class that is a list containing elements of a data type.
</item>


<item status="done">
Use createSOAPConverter to create the fromConverter when we are defining the classes.
<br/>
SnippetType is getting the wrong converter, yet createSOAPConverter for the type is correct.
See kml.R.
In defClass(), the type@slotTypes[[1]] is a PrimitiveSchemaType, not an AttributeDef.
This is because it is coming in indirectly from a field in FeatureType.
When we resolve that, we get a different definition of 
<br/>
Temporarily changed getName() and also had resolve() method for AttributeDef
return the AttributeDef but with the type resolved.
We may need to back these out, but defineClasses() seems to complete.
</item>

<item status="check">
<b>The following doesn't appear to happen anymore now. See check.R</b>
<br/>
How do we end up wth SchemaComplexType at the top-level of the schema?
We only see them in the XMCDA schema in all our sample schema (see check.R).
It looks like these should turn into ClassDefinition.
For example, the "parameters" type is a sequence and an attribute group.
<br/>
<b>So implement this case in processSchemaType</b>
<br/>
Map the SchemaComplexType in XMCDA to ClassDefinition types.
</item>


<item>
Implement method for createSOAPConverter for SimpleSequenceType.
 UnionDefinition (is this already done generically). 
SchemaGroupType, SchemaComplexType.
<br/>
Do we want to do Element and SimplElement?
<br/>
For SimpleSequenceType, move the code from createArrayClass to <r:func>createSOAPConverter</r:func>
but we need to compute the base type and the type of the elements.
</item>

<item status="done">
In <r:func>genSlotFromConverterCode</r:func>, we are getting the name of the element not the type
for <r:class>LocalElement</r:class>.  See <r:func>getRTypeFromSOAP</r:func>
<br/>
Extended <r:func>getRTypeFromSOAP</r:func> to look at its first argument
and to process a GenericSchemaType and a LocalElement to get the name, then map it.
</item>

<item status="done">
When creating the prototype for a class definition,
make certain we use the default value for an attribute.
<br/>
See SnippetType and vec2Type in kml21.
</item>

<item>
How to get fromXML(node) to recognize that there is a mapping
from the element name to a class when the element name does not
correspond to an actual class?
<br/>
Do we define a class for the element?
<br/>
Problem is multiple elements may map to the same name.
But not at the top-level.  Can we use composite names to identify the class
for internal/local elements.
<br/>
Another approach is store the information about
elements to actual classes in a variable that we can identify
from the root of the document. We know the 
names of the possible root types, so we can create a
variable for each of these. To avoid conflicts, we
could use the namespace URI in the name.
This would be even easier if we could put the schema classes
into  a separate environment, e.g. package.
For example,  in kml21
BalloonStyle corresponds to BalloonStyleType,
and GroundOverlay corresponds to GroundOverlayType.

<br/>
So let's find the Element and SimpleElements in the schema
and get the names of their R types. 
<r:code>
library(XMLSchema); sch = readSchema("~/GitWorkingArea/XMLSchema/inst/samples/kml21.xsd")
e = sapply(sch[[1]], function(x) is(x, "Element") || is(x, "SimpleElement"))
elementMap = sapply(sch[[1]][e], function(x) x@type@Rname)
</r:code>
To see the comparison between the names
<r:code>
cbind(names(sapply(sch[[1]][e], function(x) x@type@Rname)), as.character(sapply(sch[[1]][e], function(x) x@type@Rname)))
</r:code>
<r:var>elementMap</r:var> is the variable we want. We can use the name of the 
node to 
We need to ensure these types are resolved first and then
compute the Rname to be certain we have the correct name.

<br/>
We have defined a method for <r:func>fromXML</r:func> to be given
or to find this map based on  the URI or being explicitly passed
it by value (or by name).
<b>We need to ensure that this is used recursively.</b>
<br/>
We could just append Type to get the class, but this is just a convention
and from the comparison above it doesn't work, styleUrl - URI, kml - KmlType
<br/>
Another approach is to define a 
class for each element that extends the associated type.
Then we define a coerce method for an XMLAbstractNode
<r:code>
setClass("GroundOverlay", contains = "GroundOverlayType")
setAs("XMLAbstractNode", "GroundOverlay", function(from) as(from, "GroundOverlayType"))
</r:code>
<b>Get rid of warning about prototype in setClass call</b>
Then <r:expr>as(ov[[1]], "GroundOverlay")</r:expr> should do its job.
</item>

<item status="fix">
Make the Element classes extend the corresponding type in makeElementClassDef
and not XMLSchemaFakeClass.  Issue with prototypes being  S4 and list and not reconcilable.  
</item>

<item status="done">
define classes correponding to Element objects
<br/>
Make this optional.
<br/>
See defineElementClasses parameter in <r:func>defineClasses</r:func>
and the function named <r:func>defineElementClasses</r:func>.
</item>

<item status="done">
Defining ObjectType in kml21.xsd doesn't use classes ID and NCName.
The PrimitiveSchemaType in <r:expr>sch[[1]]$ObjectType@slotTypes[[1]]@type</r:expr>
has a value for Rname that is "character" and not ID
</item>


<item status="check">
<i>Check SSOAP to see if this has broken anything.</i>

The default value for the ERROR slot in eGQueryResultType should be character(0), not "".
<br/>
The defaultValues in defineClassDefinition() are correct.
Fix makePrototype().
A simple call to prototype(defaults) gets the right thing. What
does it screw up elsewhere.
</item>

<item status="check">
Related to createSOAPConverter(), make certain to deal with mixed
and simple content when we have to pick up the text content from the node.
e.g. SnippetType in kml21
<br/>
See kml.R.  Works for string or character as base class.
</item>


<item status="check">
Create the fromConverter for ClassDefinition and ExtendedClassDefinition.
<br/>
Use createSOAPConverter if possible.
<br/>
Make fromXML handle optional slots, required slots, 
attributes, attribute default values, etc.
<br/>
LatLonBoxType in kml2.1.xsd
Use this as an example of converting an ExtendedClassDefinition into
an R class and a fromConverter.
These elements are optional. So we have to check if they are present.
<br/>
See LatLonBoxType.Rdb in Books/XMLTechnologies/XMLSchema.
<br/>
<b>Works for these</b>
</item>

<item status="done">
Create the enumerated constants for RestrictedStringDefinition.
Make this optionally.
This would create a variable with the same name as the actual value
and be there solely to avoid typos.
<br/>
Document the defineVarEnums.
</item>

<item status="document">
Document CodeGenOpts and provide a constructor function.
</item>

<item status="done">
remove the kml.xml file in inst/samples/
<br/>
in notes/
</item>



<item status="low">
Pretty print the description objects.
Define <r:func>show</r:func> methods.
</item>

<item status="done">
SimpleSequenceType: biblio.xsd and Authors
<br/>
What about this? On my  hand-written notes.
<br/>
We need to create a validity method, converter, 
and also force the definitions of dependent classes.

<br/>
We should be able to move this to <r:func>createSOAPConverter</r:func>
but we need to compute the base type and the type of the elements.
</item>



<item status="medium">
Should we check the validity for length =  0 in
a SimpleSequenceType if the minOccurs is 1.
</item>

<item status="low">
Graphical display of class hierarchy.
</item>


<item status="check">
Default value for Extension.row in pmml is wrong - character(). Should be NULL.
<br/>
We now kill these off too, I believe.
</item>


<item status="done">
What is the difference between SchemaAnyType (fewer occurrences) and AnySchemaType.
<br/>
I have removed the former now. Test!!!!!
</item>

<item status="later" id="string">
Define a "string" class that extends/contains "character".
Problem is that we lose the class of the elements
as they become "character".
</item>

<item status="later">
Have to use a list as the base class for RestrictedListType 
(and SimpleSequenceType) when the element type is a sub-class
of a primitive type, e.g. "string" or "character".  See <ref ref="#string"/>
</item>

</items>
</topic>
</topics>
