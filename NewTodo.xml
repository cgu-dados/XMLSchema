<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="/Users/duncan/Classes/StatComputing/XDynDocs/inst/XSL/OmegahatXSL/Todo.xsl" ?> 

<topics xmlns:r="http://www.r-project.org">
<topic>
<title>General</title>
<items>

<item status="done">
Use createSOAPConverter to create the fromConverter when we are defining the classes.
<br/>
SnippetType is getting the wrong converter, yet createSOAPConverter for the type is correct.
See kml.R.
In defClass(), the type@slotTypes[[1]] is a PrimitiveSchemaType, not an AttributeDef.
This is because it is coming in indirectly from a field in FeatureType.
When we resolve that, we get a different definition of 
<br/>
Temporarily changed getName() and also had resolve() method for AttributeDef
return the AttributeDef but with the type resolved.
We may need to back these out, but defineClasses() seems to complete.
</item>

<item>
Implement method for createSOAPConverter for SchemaGroupType.
</item>

<item status="done">
In <r:func>genSlotFromConverterCode</r:func>, we are getting the name of the element not the type
for <r:class>LocalElement</r:class>.  See <r:func>getRTypeFromSOAP</r:func>
<br/>
Extended <r:func>getRTypeFromSOAP</r:func> to look at its first argument
and to process a GenericSchemaType and a LocalElement to get the name, then map it.
</item>

<item status="done">
When creating the prototype for a class definition,
make certain we use the default value for an attribute.
<br/>
See SnippetType and vec2Type in kml21.
</item>

<item>
How to get fromXML(node) to recognize that there is a mapping
from the element name to a class when the element name does not
correspond to an actual class?
<br/>
Do we define a class for the element?
<br/>
Problem is multiple elements may map to the same name.
But not at the top-level.  Can we use composite names to identify the class
for internal/local elements.
</item>


<item status="done">
Defining ObjectType in kml21.xsd doesn't use classes ID and NCName.
The PrimitiveSchemaType in <r:expr>sch[[1]]$ObjectType@slotTypes[[1]]@type</r:expr>
has a value for Rname that is "character" and not ID
</item>

<item>
In processing egquery.xsd, eGCQueryResultType doesn't recognize
the maxOccurs for the slot named ResultItem (with @type ResultItemType) and so just has one rather than a list
of them.
<br/>
After we readSchema(), we have the correct information. So it is when we define the class.
The call to createClassRepresentation() returns "ResultItemType" for the second slot
rather than a list of these.  We should define a new RestrictedListType or something
that induces a new class which is a List-Of-ResultItemType objects.
This calls mapSchemaTypeToS().
If this creates a new class description, we have to ensure that is defined.
So we should do this earlier in the process, i.e. recognize the count
and turn the slotType into RestrictedListType in the ClassDefinition.
So this would be done in <r:func>processSchemaType</r:func>.
The problem is that we have a local element there.
So it is legitimate to leave that as is, unaggressively  describing the element.
<r:code>
source("query.R")
e = query[[1]]$eGQueryResult@slotTypes[[2]]
class(e)
e@count
</r:code>
The count is also on the type, but that is a SchemaTypeReference.
This is getting lost when we resolve the reference.
<br/>
This is probably okay and then we recognize that we have a type
and a number of elements. So we could create an intermediate class,
or use a generic list with a filter on the types. This still
needs an intermediate class that extends the generic list type.
<br/>
Is this similar to Authors in biblio.xsd, i.e.
making a class that is a list containing elements of a data type.
</item>

<item status="check">
<i>Check SSOAP to see if this has broken anything.</i>

The default value for the ERROR slot in eGQueryResultType should be character(0), not "".
<br/>
The defaultValues in defineClassDefinition() are correct.
Fix makePrototype().
A simple call to prototype(defaults) gets the right thing. What
does it screw up elsewhere.
</item>

<item status="check">
Related to createSOAPConverter(), make certain to deal with mixed
and simple content when we have to pick up the text content from the node.
e.g. SnippetType in kml21
<br/>
See kml.R.  Works for string or character as base class.
</item>


<item status="check">
Create the fromConverter for ClassDefinition and ExtendedClassDefinition.
<br/>
Use createSOAPConverter if possible.
<br/>
Make fromXML handle optional slots, required slots, 
attributes, attribute default values, etc.
<br/>
LatLonBoxType in kml2.1.xsd
Use this as an example of converting an ExtendedClassDefinition into
an R class and a fromConverter.
These elements are optional. So we have to check if they are present.
<br/>
See LatLonBoxType.Rdb in Books/XMLTechnologies/XMLSchema.
<br/>
<b>Works for these</b>
</item>

<item status="done">
Create the enumerated constants for RestrictedStringDefinition.
Make this optionally.
This would create a variable with the same name as the actual value
and be there solely to avoid typos.
<br/>
Document the defineVarEnums.
</item>

<item status="document">
Document CodeGenOpts and provide a constructor function.
</item>

<item status="done">
remove the kml.xml file in inst/samples/
<br/>
in notes/
</item>

<item>
define classes correponding to Element objects
<br/>
Make this optional.
</item>

<item status="low">
Pretty print the description objects.
Define <r:func>show</r:func> methods.
</item>

<item>
SimpleSequenceType: biblio.xsd and Authors
<br/>
What about this? On my  hand-written notes.
<br/>
We need to create a validity method, converter, 
and also force the definitions of dependent classes.

<br/>
We should be able to move this to <r:func>createSOAPConverter</r:func>
but we need to compute the base type and the type of the elements.
</item>

<item status="low">
Graphical display of class hierarchy.
</item>

<item>
defineClass(pmmlSchema) fails.
<br/>
Ending up with a call o getClassDef() with "" as the name of the class.
This happens as part of processing the ChildParent type.
In the call to defineClassDefinition for this, we get
<r:code>
sapply(i@slotTypes, class)
<r:output><![CDATA[
                   Extension    TableLocatorOrInlineTable 
                   "Element"            "UnionDefinition" 
                  childField                  parentField 
          "SchemaStringType"           "SchemaStringType" 
            parentLevelField                  isRecursive 
          "SchemaStringType" "RestrictedStringDefinition" 
]]></r:output>
</r:code>
We are dying in the 6th of these which is a SchemaStringType.
</item>

<item status="check">
Default value for Extension.row in pmml is wrong - character(). Should be NULL.
<br/>
We now kill these off too, I believe.
</item>


<item status="done">
What is the difference between SchemaAnyType (fewer occurrences) and AnySchemaType.
<br/>
I have removed the former now. Test!!!!!
</item>

<item status="later" id="string">
Define a "string" class that extends/contains "character".
Problem is that we lose the class of the elements
as they become "character".
</item>

<item status="later">
Have to use a list as the base class for RestrictedListType 
(and SimpleSequenceType) when the element type is a sub-class
of a primitive type, e.g. "string" or "character".  See <ref ref="#string"/>
</item>

</items>
</topic>
</topics>
